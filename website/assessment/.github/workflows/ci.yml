name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  lint-and-format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: website/assessment/package-lock.json
      
      - name: Install dependencies
        run: |
          cd website/assessment
          npm ci
      
      - name: Run ESLint
        run: |
          cd website/assessment
          npm run lint
      
      - name: Check TypeScript compilation
        run: |
          cd website/assessment
          npm run type-check
      
      - name: Check code formatting
        run: |
          cd website/assessment
          npx prettier --check "src/**/*.{ts,js,json}"

  unit-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: website/assessment/package-lock.json
      
      - name: Install dependencies
        run: |
          cd website/assessment
          npm ci
      
      - name: Run unit tests
        run: |
          cd website/assessment
          npm run test:unit
      
      - name: Generate coverage report
        run: |
          cd website/assessment
          npm run test:coverage
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: website/assessment/coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  integration-tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_DB: ai_assessment_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: website/assessment/package-lock.json
      
      - name: Install dependencies
        run: |
          cd website/assessment
          npm ci
      
      - name: Run database migrations
        run: |
          cd website/assessment
          npm run db:migrate
        env:
          DATABASE_URL: postgresql://postgres:test@localhost:5432/ai_assessment_test
      
      - name: Run integration tests
        run: |
          cd website/assessment
          npm run test:integration
        env:
          DATABASE_URL: postgresql://postgres:test@localhost:5432/ai_assessment_test
          REDIS_URL: redis://localhost:6379

  e2e-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: website/assessment/package-lock.json
      
      - name: Install dependencies
        run: |
          cd website/assessment
          npm ci
      
      - name: Install Playwright browsers
        run: |
          cd website/assessment
          npm run playwright:install
      
      - name: Start application
        run: |
          cd website/assessment
          npm run dev &
          sleep 30
        env:
          NODE_ENV: test
      
      - name: Run E2E tests
        run: |
          cd website/assessment
          npm run test:e2e
      
      - name: Upload E2E test results
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: playwright-report
          path: website/assessment/playwright-report/

  performance-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: website/assessment/package-lock.json
      
      - name: Install dependencies
        run: |
          cd website/assessment
          npm ci
      
      - name: Run performance tests
        run: |
          cd website/assessment
          npm run test:performance
      
      - name: Performance regression check
        run: |
          cd website/assessment
          node scripts/performance-check.js

  security-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: website/assessment/package-lock.json
      
      - name: Install dependencies
        run: |
          cd website/assessment
          npm ci
      
      - name: Run security audit
        run: |
          cd website/assessment
          npm audit --audit-level moderate
      
      - name: Run SAST scan
        uses: github/super-linter@v4
        env:
          DEFAULT_BRANCH: main
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VALIDATE_TYPESCRIPT_ES: true
          VALIDATE_JAVASCRIPT_ES: true

  accessibility-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: website/assessment/package-lock.json
      
      - name: Install dependencies
        run: |
          cd website/assessment
          npm ci
      
      - name: Install accessibility testing tools
        run: |
          cd website/assessment
          npm install -D @axe-core/playwright pa11y-ci
      
      - name: Start application
        run: |
          cd website/assessment
          npm run dev &
          sleep 30
      
      - name: Run accessibility tests
        run: |
          cd website/assessment
          npx pa11y-ci --sitemap http://localhost:3000/sitemap.xml
      
      - name: Run Axe accessibility tests
        run: |
          cd website/assessment
          npx playwright test --grep="accessibility"

  build-and-deploy:
    needs: [lint-and-format, unit-tests, integration-tests, e2e-tests, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: website/assessment/package-lock.json
      
      - name: Install dependencies
        run: |
          cd website/assessment
          npm ci
      
      - name: Build application
        run: |
          cd website/assessment
          npm run build
      
      - name: Run post-build tests
        run: |
          cd website/assessment
          npm run test:build
      
      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment"
          # Add deployment commands here
      
      - name: Run smoke tests
        run: |
          cd website/assessment
          npm run test:smoke
      
      - name: Notify deployment status
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: always()